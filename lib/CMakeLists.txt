cmake_minimum_required(VERSION 3.20)


set(LIBRARY_NAME ${PROJECT_NAME})
set(LIBRARY_VERSION ${PROJECT_VERSION})
set(LIBRARY_VERSION_MAJOR ${PROJECT_VERSION_MAJOR})
set(LIBRARY_VERSION_MINOR ${PROJECT_VERSION_MINOR})
set(LIBRARY_VERSION_PATCH ${PROJECT_VERSION_PATCH})

add_compile_definitions(
	${PROJECT_ACRONYM_UPPERCASE}_NAME=${LIBRARY_NAME}
	${PROJECT_ACRONYM_UPPERCASE}_VERSION_MAJOR=${LIBRARY_VERSION_MAJOR}
	${PROJECT_ACRONYM_UPPERCASE}_VERSION_MINOR=${LIBRARY_VERSION_MINOR}
	${PROJECT_ACRONYM_UPPERCASE}_VERSION_PATCH=${LIBRARY_VERSION_PATCH}
)

option(BUILD_STATIC "BUILD_STATIC" OFF)

if (BUILD_STATIC)
	set(LIBRARY_TYPE STATIC)
else()
	set(LIBRARY_TYPE SHARED)
endif()

include_directories(include)

file(GLOB_RECURSE LIBRARY_HEADER *.h)
file(GLOB_RECURSE LIBRARY_INLINE *.inl)
file(GLOB_RECURSE LIBRARY_SOURCE *.c)

add_library(${LIBRARY_NAME} ${LIBRARY_TYPE} ${LIBRARY_HEADER} ${LIBRARY_INLINE} ${LIBRARY_SOURCE})
set_property(TARGET ${LIBRARY_NAME} PROPERTY C_STANDARD ${PROJECT_C_DIALECT})

target_include_directories(${LIBRARY_NAME} PUBLIC include ${DEPS_INCLUDE_DIRS})
target_link_libraries(${LIBRARY_NAME} PUBLIC ${DEPS_LIBRARIES})

if (WIN32)
	add_compile_definitions(${PROJECT_ACRONYM_UPPERCASE}_WINDOWS)
elseif (UNIX)
	add_compile_definitions(${PROJECT_ACRONYM_UPPERCASE}_LINUX)
elseif (APPLE)
	add_compile_definitions(${PROJECT_ACRONYM_UPPERCASE}_APPLE)
else()
	message(FATAL_ERROR "Platforms other than Windows, Linux and MacOS aren't supported for now")
endif()
